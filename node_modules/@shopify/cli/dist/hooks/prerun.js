import {
  startAnalytics
} from "../chunk-BUQTR47W.js";
import "../chunk-URD52LAO.js";
import "../chunk-55F2DQCB.js";
import "../chunk-23EONB5V.js";
import {
  initDemoRecorder,
  outputDebug
} from "../chunk-ZLSD2RNR.js";
import "../chunk-FQIRJADJ.js";
import "../chunk-FBB6KUZG.js";
import "../chunk-OVPEO3GL.js";
import "../chunk-4AOK4O3R.js";
import "../chunk-FWGRGI4R.js";
import "../chunk-BE73NZXB.js";
import "../chunk-VNBOO6TJ.js";
import "../chunk-QTHWTF4X.js";
import "../chunk-RQ24VTW4.js";
import "../chunk-WCNR75S2.js";
import "../chunk-G6FN5VUE.js";
import "../chunk-3JLUTHGR.js";
import "../chunk-GXPKATXW.js";
import {
  init_cjs_shims
} from "../chunk-M63RTPGR.js";

// src/hooks/prerun.ts
init_cjs_shims();

// ../cli-kit/src/public/node/hooks/prerun.ts
init_cjs_shims();
var hook = async (options) => {
  initDemoRecorder();
  const commandContent = parseCommandContent({
    id: options.Command.id,
    aliases: options.Command.aliases,
    pluginAlias: options.Command.plugin?.alias
  });
  const args = options.argv;
  outputDebug(`Running command ${commandContent.command}`);
  await startAnalytics({ commandContent, args, commandClass: options.Command });
};
function parseCommandContent(cmdInfo) {
  let commandContent = parseCreateCommand(cmdInfo.pluginAlias);
  if (!commandContent) {
    commandContent = parseNormalCommand(cmdInfo.id, cmdInfo.aliases);
  }
  return commandContent;
}
function parseNormalCommand(id, aliases) {
  return {
    command: id.replace(/:/g, " "),
    topic: parseTopic(id),
    alias: findAlias(aliases)
  };
}
function parseCreateCommand(pluginAlias) {
  if (!pluginAlias || !pluginAlias.startsWith("@shopify/create-")) {
    return void 0;
  }
  return { command: pluginAlias.substring(pluginAlias.indexOf("/") + 1) };
}
function parseTopic(cmd) {
  if (cmd.lastIndexOf(":") === -1) {
    return;
  }
  return cmd.slice(0, cmd.lastIndexOf(":")).replace(/:/g, " ");
}
function findAlias(aliases) {
  const existingAlias = aliases.find(
    (alias) => alias.split(":").every((aliasToken) => process.argv.includes(aliasToken))
  );
  if (existingAlias) {
    return existingAlias.replace(/:/g, " ");
  }
}
export {
  hook as default
};
